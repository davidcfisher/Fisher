// ==========================================================================
//    Send AT cmds right from serial monitor
//    Cal Killen - January 2019
//    Just enter AT commands via the monitor - you don't have to capitalize commands
// ==========================================================================

// defines
#define TINY_GSM_MODEM_XBEE  // Select for Digi brand WiFi or Cellular XBee's
#define TINY_GSM_RX_BUFFER 1024  // internal receive buffer size
#define SerialMon Serial  // Set serial for debug console (to the Serial Monitor, speed 115200)
#define SerialAT Serial1  // Set serial for AT commands (to the module)

// includes
#include <TinyGsmClient.h>// This include must be included below the define of the modem name!
#include <MemoryFree.h> // for memory command to see how much memory is left
#include "SdFat.h"
SdFat SD;
#define SD_CS_PIN SS

// variables
char read_buffer[TINY_GSM_RX_BUFFER] ; // for now assume we only receive data that's less than 1000 characters long.
//String at_out[100] ; // Response from any AT command
char host[200] = "lake-man.com" ; // or "lake-man.com" or "132.148.85.45"
char resource[200] = "/scripts/mayfly_server.pl";
char parms[200] = "asdf=qwer" ;
char access_point_name[] = "hologram" ; // or whatever your apn is for your SIM card
char msmt_file_name[] = "test.csv" ;
char logger_name[] = "Culvert x" ;

// Use this if you want to spy on modem communication.  Uncomment next 3 lines, and comment the next
//#include <StreamDebugger.h>
//StreamDebugger debugger(SerialAT, SerialMon);
//TinyGsm modem(debugger);
TinyGsm modem(SerialAT); // comment this line
TinyGsmClient client(modem);
#include <xBee_TIA-Software.h> // TIA-Software XBEE library - must be included AFTER the variable definitions

void setup()
{
    SerialMon.begin(9600);    // communication to/from Mayfly over USB
    SerialAT.begin(9600);   // Spy on the communication to/from Modem
    SerialMon.println("Both SerialMon and SerialAT must be 9600 baud") ;

    setup_xbee() ;  // this code gets the modem ready
    SerialMon.println("Enter \"HELP\" to see how to run AT commands etc.") ;
} // end setup

void loop()
{
    // enter AT commands on the monitor.
    char buf[100] ; // input buffer
    char bufsave[100] ; // save input buffer for repeating
	SerialMon.print(">") ; // show that I'm ready for input
    
	// process command entered from monitor
    int i = 0 ;
    while (!SerialMon.available()) {} // wait for something to by typed and sent
    while (SerialMon.available() > 0) { // it's ready
        delay(20) ; // don't know if this is needed
        buf[i] = SerialMon.read(); // Read a character
        i++ ;
        
        if (i > 66) { 
          SerialMon.println("exceeded input buffer size. exiting...") ;
          return ;
        }   
    }
    buf[i] = '\0' ; // terminate char string

    // Special Commands - LastCommand, SLEEP / WAKE the modem, GET http, VOLTAGE, connect, sethost, setresource, setparms, showurl
    if (0 == strcasecmp("lc", buf)) { // repeat last command
        strcpy(buf,bufsave) ;
    }
    else { // or save this new command
        strcpy(bufsave,buf) ;
    }
	// help text
    if (0 == strcasecmp("help", buf)) {
        SerialMon.println("Enter any 2 character AT command on the monitor.  Make sure  \"No line ending\" is set.") ;
        SerialMon.println("  some useful AT commands:\n  AM (airplane mode)\n  SM (sleep mode)\n  MY (current ip address)\n  DB (RSSI)\n  AI (connection status)\n  IM (IMEI)\n  S# (SIM card #)") ;
        SerialMon.println("To SET a VALUE for an AT command, enter the AT command + VALUE (with or without a space between).") ;
        SerialMon.println("  ex. SM1          (sets sleep mode to 1)\n      SM 1         (also sets sleep mode to 1)\n      AN hologram  (sets Access Point Name to \"hologram\"") ;
        SerialMon.println("Macro commands:\n  lc (repeats last command\n  sleep (sleeps the modem if SM is 1)\n  wake (wakes the modem)\n  ram (shows free memory)") ;
        SerialMon.println("  voltage (displays v)\n  connect (connects to network)\n  sethost xxx (sets host=xxx)\n  setresource xxx (sets resource=xxx)") ;
        SerialMon.println("  setparms xxx (sets paramaters=xxx)\n  showurl (shows the entire URL of host-resource-parms)\n  seturl (sets host,resource & pamrs all in one line\n  get (does an HTTP GET with current URL)") ;
        SerialMon.println("  post (does an HTTP POST with current URL)\n  sendmsmts (sends all new measurements from SD card to server)\n  sendserver xxxx (sends server command xxxx)") ;
        digitalWrite(23, HIGH);  // for this to work, sm must be 1
        return;
    }
	// Special Commands
    if (0 == strcasecmp("sleep", buf)) {
        SerialMon.println("sleeping") ;
        digitalWrite(23, HIGH);  // for this to work, sm must be 1
        return;
    }
    if (0 == strcasecmp("wake", buf)) {
        SerialMon.println("waking") ;
        digitalWrite(23, LOW);  // this should wake the modem
        return;
    }
    if (0 == strcasecmp("voltage", buf)) {
        float v = get_voltage() ;
        SerialMon.print("Voltage: ") ;
        SerialMon.println(v) ;
        digitalWrite(23, LOW);  // this should wake the modem
        return;
    }
    // HTTP GET
    if (0 == strcasecmp("get", buf)) {
        SerialMon.println("Performing GET") ;
        int bytesReceived = http_get(host, resource, parms) ;
        SerialMon.print("Bytes received: ") ;
        SerialMon.print(bytesReceived) ;
        SerialMon.println("   Data:--------------------") ;
         SerialMon.println(read_buffer) ;
         SerialMon.println("--------------------") ;
        return ;
    }
    // HTTP POST
      if (0 == strcasecmp("post", buf)) {
        SerialMon.println("Performing POST") ;
        int bytesReceived = http_post(host, resource, parms) ;
        SerialMon.print("Bytes received: ") ;
        SerialMon.print(bytesReceived) ;
        SerialMon.println("   Data:--------------------") ;
         SerialMon.println(read_buffer) ;
         SerialMon.println("--------------------") ;
        return ;
    }
    // Special Command do a connect to network then gets the IP of the URL
    if (0 == strcasecmp("connect", buf)) {
        SerialMon.println("Performing CONNECT") ;
		connect_to_network() ; 
        connect_to_host(host, 80) ;
        //connect_to_host("132.148.85.45", 80) ;
        return ;
    }
    // Special Command sethost
    if (0 == strncasecmp("sethost", buf, 7)) {
        char *ps = buf + 7 ;
        if (0 == strncmp(" ",ps,1))  ps++ ;   // space after command

        char *pd = host ;
        strcpy(pd, ps);
        SerialMon.print("Setting host to: ") ;
        SerialMon.println(host) ;
        return ;
    }
    // Special Command setresource
    if (0 == strncasecmp("setresource", buf, 11)) {
        char *ps = buf + 11 ;
        if (0 == strncmp(" ",ps,1)) {
            ps++ ;   // space after command
        }
        char *pd = resource ;
        strcpy(pd, ps);
        SerialMon.print("Setting resource to: ") ;
        SerialMon.println(resource) ;
        return ;
    }
    // Special Command setparms
    if (0 == strncasecmp("setparms", buf, 8)) {
        char *ps = buf + 8 ;
        if (0 == strncmp(" ",ps,1)) {
            ps++ ;   // space after command
        }
        char *pd = parms ;
        strcpy(pd, ps);
        SerialMon.print("Setting parms to: ") ;
        SerialMon.println(parms) ;
        return ;
    }
    
    // Special Command seturl
    if (0 == strncasecmp("seturl", buf, 6)) {
        char *s = buf + 6 ;  //s = start
        char *e ;           //e = end
        int size ;
        if (0 == strncmp(" ",s,1)) {  s++ ; }  // space after command
        e = strchr(s, '/') ;// look for first "/" or end
        strcpy(host, s) ;  // copy entire buffer to host
        if (e == NULL) { // no resource or parms
            resource[0] = '\0' ;
            parms[0] = '\0' ;
        }
        else {
            host[e-s] = '\0' ;
            strcpy(resource,e ) ; // copy whats left in buff to resource
            s = e ; // start at resource and look for '?'
            e = strchr(s,'?') ;
            if (e == NULL) { // no parms
                parms[0] = '\0' ;
            }
            else {
                resource[e-s] = '\0' ;
                s = e + 1 ; //  skip the ?
                strcpy(parms,s) ;
            }
        }
        SerialMon.print("host= \"") ;
        SerialMon.print(host) ;
        SerialMon.print("\" resource= \"") ;
        SerialMon.print(resource) ;
        SerialMon.print("\" parms= \"") ;
        SerialMon.print(parms) ;
        SerialMon.println("\"" ) ;
        return ;
    }

    // Special Command showurl
    if (0 == strncasecmp("showurl", buf, 7)) {
        SerialMon.print("URL: ") ;
        SerialMon.print(host) ;
        SerialMon.print(resource) ;
        SerialMon.print("?") ;
        SerialMon.println(parms) ;
        return ;
    }
     
    // Special Command sendserver ( send a SERVER command to mayfly_server.pl )
    if (0 == strncasecmp("sendserver", buf, 10)) {
        char *ps = buf + 10 ;
        if (0 == strncmp(" ",ps,1))  ps++ ;   // space after command
        char * data = send_command(ps,"abcd") ; // "" is the data I sent
        SerialMon.println(data) ;
        return ;
    }
    
    // Special Command ram
    if (0 == strncasecmp("ram", buf, 3)) {
        SerialMon.print("Free Memory (bytes): ");
        SerialMon.println(freeMemory());
        return ;
    }
    
    // Special Command sendmsmts
    if (0 == strncasecmp("sendmsmts", buf, 9)) {
        send_msmts() ;
        return ;
    }
	
    // for normal AT commands, lower case is OK
    buf[0] = toupper(buf[0]) ; // make sure first 2 chars are uppercase
    buf[1] = toupper(buf[1]) ;
    char at_cmd[3] ;
    memcpy(at_cmd,&buf[0],2) ;
    at_cmd[2] = '\0' ;

    int timeout = 200 ; // change timeout for slow commands
    if (0 == strcmp("LA",at_cmd)) { // lookup address is slow
        SerialMon.println("Timeout 5 seconds") ;
        timeout = 5000 ;
    }

    // print the AT you typed
    //SerialMon.print("AT Command: ") ;
    SerialMon.print(buf) ;

    // print the response to the AT command
    modem.commandMode() ; // make sure in command mode. same as +++ AT command.  only stays in AT mode for 10 seconds
    modem.sendAT(buf);    // send the command
    String at_out = modem.readResponseString(timeout);
    //SerialMon.print(", Response:) ;
    SerialMon.print(" \"" + at_out + "\" ") ;

    // check command to see if I want to display additional information about the response
    //SerialMon.println(at_cmd) ;
    if (0 == strcmp("AI",at_cmd)) {
        if (at_out == "2C") {      SerialMon.print("Power Saving Mode" ) ;        }
        else if(at_out == "0") {   SerialMon.print("Connected - Ready" ) ;        }
        else if(at_out == "22") {  SerialMon.print("Registering..." ) ;        }
        else if(at_out == "23") {  SerialMon.print("Connecting..." ) ;        }
        else if(at_out == "25") {  SerialMon.print("Registration denied..." ) ;        }
        else if(at_out == "2A") {  SerialMon.print("Airplane Mode" ) ;        }
        else if(at_out == "2F") {  SerialMon.print("Bypass Mode" ) ;        }
        else if(at_out == "FF") {  SerialMon.print("Initializing..." ) ;        }
    }
    SerialMon.println("") ;
}
